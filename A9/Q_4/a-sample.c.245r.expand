
;; Function main (main, funcdef_no=6, decl_uid=2863, cgraph_uid=7, symbol_order=6)

int main ()
{
  int n;
  int i;
  int a;
  int D.2876;
  int _1;
  int i.0_2;
  int _15;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_7 = 0;
  i_8 = 0;
  n_9 = 13;
  i_10 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = a_3 * 2;
  a_17 = i_4 + _1;
  i_18 = i_4 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # a_3 = PHI <a_7(2), a_17(3)>
  # i_4 = PHI <i_10(2), i_18(3)>
  if (i_4 < n_9)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  printf ("%d\n", i_4);
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 1
;;    pred:       7
  __builtin_puts (&"hi"[0]);
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       5
;;                6
  # i_5 = PHI <i_4(5), i_13(6)>
  i.0_2 = i_5;
  i_13 = i.0_2 + -1;
  if (i.0_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       6
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  printf ("%d\n", a_3);
  _15 = 0;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
<L6>:
  return _15;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (i.0_2 - 2 )
Partition 3 (a_3 - 3 )
Partition 4 (i_4 - 4 )
Partition 5 (i_5 - 5 )
Partition 7 (a_7 - 7 )
Partition 8 (i_8 - 8 )
Partition 9 (n_9 - 9 )
Partition 10 (i_10 - 10 )
Partition 13 (i_13 - 13 )
Partition 15 (_15 - 15 )
Partition 17 (a_17 - 17 )
Partition 18 (i_18 - 18 )
Partition 19 (_19(D) - 19 )


Coalescible Partition map 

Partition 0, base 0 (a_3 - 3 7 17 )
Partition 1, base 1 (i_4 - 4 5 8 10 13 18 )
Partition 9, base 2 (_19(D) - 19 )


Partition map 

Partition 0 (a_3 - 3 )
Partition 1 (i_4 - 4 )
Partition 2 (i_5 - 5 )
Partition 3 (a_7 - 7 )
Partition 4 (i_8 - 8 )
Partition 5 (i_10 - 10 )
Partition 6 (i_13 - 13 )
Partition 7 (a_17 - 17 )
Partition 8 (i_18 - 18 )
Partition 9 (_19(D) - 19 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) a_3 <-> a_7
(2147483646, 0) a_3 <-> a_17
(2147483646, 0) i_4 <-> i_10
(2147483646, 0) i_4 <-> i_18
(2147483646, 0) i_4 <-> i_5
(2147483646, 0) i_4 <-> i_8
(2147483646, 0) i_4 <-> i_13
(10000, 0) i_5 <-> i_13

Partition map 

Partition 0 (a_3 - 3 )
Partition 1 (i_4 - 4 )
Partition 2 (i_5 - 5 )
Partition 3 (a_7 - 7 )
Partition 4 (i_8 - 8 )
Partition 5 (i_10 - 10 )
Partition 6 (i_13 - 13 )
Partition 7 (a_17 - 17 )
Partition 8 (i_18 - 18 )
Partition 9 (_19(D) - 19 )

Coalesce list: (3)a_3 & (7)a_7 [map: 0, 3] : Success -> 0
Coalesce list: (3)a_3 & (17)a_17 [map: 0, 7] : Success -> 0
Coalesce list: (4)i_4 & (10)i_10 [map: 1, 5] : Success -> 1
Coalesce list: (4)i_4 & (18)i_18 [map: 1, 8] : Success -> 1
Coalesce list: (4)i_4 & (5)i_5 [map: 1, 2] : Success -> 1
Coalesce list: (4)i_4 & (8)i_8 [map: 1, 4] : Success -> 1
Coalesce list: (4)i_4 & (13)i_13 [map: 1, 6] : Success -> 1
Coalesce list: (5)i_4 & (13)i_4: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (i.0_2 - 2 )
Partition 2 (a_3 - 3 7 17 )
Partition 3 (i_4 - 4 5 8 10 13 18 )
Partition 4 (n_9 - 9 )
Partition 5 (_15 - 15 )
Partition 6 (_19(D) - 19 )

int main ()
{
  int n;
  int i;
  int a;
  int D.2876;
  int _1;
  int i.0_2;
  int _15;
  int _19(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  a_7 = 0;
  i_8 = 0;
  n_9 = 13;
  i_10 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = a_3 * 2;
  a_17 = i_4 + _1;
  i_18 = i_4 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # a_3 = PHI <a_7(2), a_17(3)>
  # i_4 = PHI <i_10(2), i_18(3)>
  if (i_4 < n_9)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  printf ("%d\n", i_4);
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 1
;;    pred:       7
  __builtin_puts (&"hi"[0]);
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       5
;;                6
  # i_5 = PHI <i_4(5), i_13(6)>
  i.0_2 = i_5;
  i_13 = i.0_2 + -1;
  if (i.0_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       6
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  printf ("%d\n", a_3);
  _15 = 0;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       8
<L6>:
  return _15;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	n_9
Partition 1: size 4 align 4
	i_4
Partition 0: size 4 align 4
	a_3

;; Generating RTL for gimple basic block 2

;; a_7 = 0;

(insn 5 4 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (const_int 0 [0])) "sample.c":6:9 -1
     (nil))

;; i_8 = 0;

(insn 6 5 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (const_int 0 [0])) "sample.c":7:9 -1
     (nil))

;; n_9 = 13;

(insn 7 6 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 n+0 S4 A32])
        (const_int 13 [0xd])) "sample.c":8:9 -1
     (nil))

;; i_10 = 0;

(insn 8 7 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (const_int 0 [0])) "sample.c":9:10 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _1 = a_3 * 2;

(insn 12 11 13 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "sample.c":10:12 -1
     (nil))

(insn 13 12 0 (parallel [
            (set (reg:SI 82 [ _1 ])
                (ashift:SI (reg:SI 86)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":10:12 -1
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

;; a_17 = i_4 + _1;

(insn 17 13 18 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":10:10 -1
     (nil))

(insn 18 17 19 (parallel [
            (set (reg:SI 89)
                (plus:SI (reg:SI 82 [ _1 ])
                    (reg:SI 90)))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":10:10 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 82 [ _1 ])
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64]))
        (nil)))

(insn 19 18 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (reg:SI 89)) "sample.c":10:10 -1
     (nil))

;; i_18 = i_4 + 1;

(insn 20 19 0 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":9:18 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 21 20 22 2 (nil) [0 uses])

(note 22 21 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_4 < n_9)

(insn 24 22 25 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":9:14 -1
     (nil))

(insn 25 24 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 91)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 n+0 S4 A32]))) "sample.c":9:14 -1
     (nil))

(jump_insn 26 25 0 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "sample.c":9:14 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; printf ("%d\n", i_4);

(insn 28 27 29 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":12:5 -1
     (nil))

(insn 29 28 30 (set (reg:SI 4 si)
        (reg:SI 92)) "sample.c":12:5 -1
     (nil))

(insn 30 29 31 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)) "sample.c":12:5 -1
     (nil))

(insn 31 30 32 (set (reg:DI 5 di)
        (reg:DI 93)) "sample.c":12:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)
        (nil)))

(insn 32 31 33 (set (reg:QI 0 ax)
        (const_int 0 [0])) "sample.c":12:5 -1
     (nil))

(call_insn 33 32 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f27477e1100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "sample.c":12:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 6

;; __builtin_puts (&"hi"[0]);

(insn 37 36 38 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f27479153f0 *.LC1>)) "sample.c":14:9 -1
     (nil))

(insn 38 37 39 (set (reg:DI 5 di)
        (reg:DI 94)) "sample.c":14:9 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f27479153f0 *.LC1>)
        (nil)))

(call_insn 39 38 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f27477e1800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "sample.c":14:9 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 7

;; 

(code_label 40 39 41 4 (nil) [0 uses])

(note 41 40 0 NOTE_INSN_BASIC_BLOCK)

;; i.0_2 = i_5;

(insn 42 41 0 (set (reg:SI 83 [ i.0_2 ])
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":13:12 -1
     (nil))

;; i_13 = i.0_2 + -1;

(insn 43 42 44 (parallel [
            (set (reg:SI 95)
                (plus:SI (reg:SI 83 [ i.0_2 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":13:12 -1
     (nil))

(insn 44 43 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (reg:SI 95)) "sample.c":13:12 -1
     (nil))

;; if (i.0_2 != 0)

(insn 46 44 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ i.0_2 ])
            (const_int 0 [0]))) "sample.c":13:11 -1
     (nil))

(jump_insn 47 46 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "sample.c":13:11 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; printf ("%d\n", a_3);

(insn 49 48 50 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "sample.c":16:5 -1
     (nil))

(insn 50 49 51 (set (reg:SI 4 si)
        (reg:SI 96)) "sample.c":16:5 -1
     (nil))

(insn 51 50 52 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)) "sample.c":16:5 -1
     (nil))

(insn 52 51 53 (set (reg:DI 5 di)
        (reg:DI 97)) "sample.c":16:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)
        (nil)))

(insn 53 52 54 (set (reg:QI 0 ax)
        (const_int 0 [0])) "sample.c":16:5 -1
     (nil))

(call_insn 54 53 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f27477e1100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "sample.c":16:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _15 = 0;

(insn 55 54 0 (set (reg:SI 84 [ _15 ])
        (const_int 0 [0])) "sample.c":17:12 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; <L6>:

(code_label 56 55 57 6 (nil) [0 uses])

(note 57 56 0 NOTE_INSN_BASIC_BLOCK)

;; return _15;

(insn 58 57 59 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _15 ])) "sample.c":18:1 -1
     (nil))

(jump_insn 59 58 60 (set (pc)
        (label_ref 0)) "sample.c":18:1 -1
     (nil))

(barrier 60 59 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.
Removing jump 59.
Merging block 11 into block 9...
Merged blocks 9 and 11.
Merged 9 and 11 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (const_int 0 [0])) "sample.c":6:9 -1
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (const_int 0 [0])) "sample.c":7:9 -1
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 n+0 S4 A32])
        (const_int 13 [0xd])) "sample.c":8:9 -1
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (const_int 0 [0])) "sample.c":9:10 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (label_ref 21)) "sample.c":9:5 -1
     (nil)
 -> 21)
;;  succ:       5

(barrier 10 9 23)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 23 10 11 4 3 (nil) [1 uses])
(note 11 23 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "sample.c":10:12 -1
     (nil))
(insn 13 12 17 4 (parallel [
            (set (reg:SI 82 [ _1 ])
                (ashift:SI (reg:SI 86)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":10:12 -1
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 17 13 18 4 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":10:10 -1
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:SI 89)
                (plus:SI (reg:SI 82 [ _1 ])
                    (reg:SI 90)))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":10:10 -1
     (expr_list:REG_EQUAL (plus:SI (reg:SI 82 [ _1 ])
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64]))
        (nil)))
(insn 19 18 20 4 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])
        (reg:SI 89)) "sample.c":10:10 -1
     (nil))
(insn 20 19 21 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":9:18 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 21 20 22 5 2 (nil) [1 uses])
(note 22 21 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 22 25 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":9:14 -1
     (nil))
(insn 25 24 26 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 91)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [1 n+0 S4 A32]))) "sample.c":9:14 -1
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "sample.c":9:14 -1
     (nil)
 -> 23)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":12:5 -1
     (nil))
(insn 29 28 30 6 (set (reg:SI 4 si)
        (reg:SI 92)) "sample.c":12:5 -1
     (nil))
(insn 30 29 31 6 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)) "sample.c":12:5 -1
     (nil))
(insn 31 30 32 6 (set (reg:DI 5 di)
        (reg:DI 93)) "sample.c":12:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)
        (nil)))
(insn 32 31 33 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "sample.c":12:5 -1
     (nil))
(call_insn 33 32 34 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f27477e1100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "sample.c":12:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(jump_insn 34 33 35 6 (set (pc)
        (label_ref 40)) "sample.c":13:10 -1
     (nil)
 -> 40)
;;  succ:       8

(barrier 35 34 45)
;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 45 35 36 7 5 (nil) [1 uses])
(note 36 45 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f27479153f0 *.LC1>)) "sample.c":14:9 -1
     (nil))
(insn 38 37 39 7 (set (reg:DI 5 di)
        (reg:DI 94)) "sample.c":14:9 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f27479153f0 *.LC1>)
        (nil)))
(call_insn 39 38 40 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f27477e1800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "sample.c":14:9 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              7 (FALLTHRU,DFS_BACK)
(code_label 40 39 41 8 4 (nil) [1 uses])
(note 41 40 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 8 (set (reg:SI 83 [ i.0_2 ])
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])) "sample.c":13:12 -1
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg:SI 95)
                (plus:SI (reg:SI 83 [ i.0_2 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "sample.c":13:12 -1
     (nil))
(insn 44 43 46 8 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A64])
        (reg:SI 95)) "sample.c":13:12 -1
     (nil))
(insn 46 44 47 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ i.0_2 ])
            (const_int 0 [0]))) "sample.c":13:11 -1
     (nil))
(jump_insn 47 46 48 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "sample.c":13:11 -1
     (nil)
 -> 45)
;;  succ:       7
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [1 a+0 S4 A32])) "sample.c":16:5 -1
     (nil))
(insn 50 49 51 9 (set (reg:SI 4 si)
        (reg:SI 96)) "sample.c":16:5 -1
     (nil))
(insn 51 50 52 9 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)) "sample.c":16:5 -1
     (nil))
(insn 52 51 53 9 (set (reg:DI 5 di)
        (reg:DI 97)) "sample.c":16:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f2747915360 *.LC0>)
        (nil)))
(insn 53 52 54 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) "sample.c":16:5 -1
     (nil))
(call_insn 54 53 55 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f27477e1100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "sample.c":16:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 55 54 58 9 (set (reg:SI 84 [ _15 ])
        (const_int 0 [0])) "sample.c":17:12 -1
     (nil))
(insn 58 55 62 9 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _15 ])) "sample.c":18:1 -1
     (nil))
(insn 62 58 63 9 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "sample.c":18:1 -1
     (nil))
(insn 63 62 0 9 (use (reg/i:SI 0 ax)) "sample.c":18:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

